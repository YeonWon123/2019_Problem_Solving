N <= 50, 각 사탕의 가격은 0 ~ 10000, 따라서 소수는 500000 이상의 수는 찾지 않아도 무방함.

사탕 4개

사탕1 1
사탕2 1
사탕3 2
사탕4 7

1. 1 2 7로 먼저 조합
1 + 2
2
7

2. (1 1) 2 7로 조합
(1 + 1)
(1 + 1) + 2 + 7

사탕의 가격의 합이 소수가 되게끔 하기!
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 ...

1 + 1 = 2 (1,1,0,0)

1 + 2 = 3 (1,0,1,0) (0,1,1,0) -> 이는 1가지 방법

2 = 2 (0,0,1,0)

7 = 7 (0,0,0,1)

1 + 1 + 2 + 7 = 11 (1,1,1,1)

따라서 그냥 가격으로 분류해야 함..!
1 1 2 7 에서, 각각을 O,X로 분류해서 그걸 계산해야 할듯


	// 먼저 각 원소에서 1개씩만 뽑아서 조합해보기 (ex: 1 2 7로만 조합)
	int temp = 0;
	for (int p = 0; p < i; p++)
	{
		for (int j = 0; j < i - p; j++) {
			temp = 0;
			for (int m = 0; m <= p; m++) temp = temp + price[j+m];
			if (thisisnumber(temp)) answer++;
		}
		/*
		// 각각을 더해서 그 값이 소수인지 판정해보기
		for (int j = 0; j < i - 1; j++) {
			if (thisisnumber(price[j] + price[j + 1])) answer++;
		}

		for (int j = 0; j < i - 2; j++) {
			if (thisisnumber(price[j] + price[j + 1] + price[j + 2])) answer++;
		}*/
	}